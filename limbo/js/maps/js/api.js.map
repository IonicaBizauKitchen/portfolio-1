{"version":3,"sources":["api.js"],"names":["nodemailer","require","transporter","createTransport","service","auth","user","process","env","GOOGLE_EMAIL","pass","GOOGLE_PASSWORD","module","exports","sendEmail","data","name","email","subject","message","mailOptions","from","to","MY_EMAIL","html","Promise","resolve","reject","verify","error","success","sendMail","info","catch","err","replyEmail"],"mappings":"AAAA,MAAMA,WAAaC,QAAQ,cAErBC,YAAcF,WAAWG,iBAC3BC,QAAS,QACTC,MACIC,KAAMC,QAAQC,IAAIC,aAClBC,KAAMH,QAAQC,IAAIG,mBAI1BC,OAAOC,SAEHC,UAAYC,IACR,MAAMC,KACFA,EAAIC,MACJA,EAAKC,QACLA,EAAOC,QACPA,GACAJ,EACEK,GACFC,KAAM,qDACNC,GAAIf,QAAQC,IAAIe,SAChBL,QAASA,EACTM,iBAAkBR,oBAAuBC,cAAkBE,SAG/D,OAAO,IAAIM,QAAQ,CAACC,EAASC,KAErBzB,YAAY0B,OAAO,SAAUC,EAAOC,GAChC,IAAID,EAGA,OAAO3B,YAAY6B,SAASX,EAAa,SAAUS,EAAOG,UAQrEC,MAAMC,QAAO,IAGtBC,WAAapB,IACT,MAAMC,KACFA,EAAIC,MACJA,GACAF,EACEK,GACFC,KAAM,kCACNC,MAAON,MAASC,KAChBC,QAAS,mCACTM,mEAEgBR,iSAUpB,OAAO,IAAIS,QAAQ,CAACC,EAASC,IACdzB,YAAY6B,SAASX,EAAa,SAAUS,EAAOG,OAM7DC,MAAMC,QAAO","file":"../../api.js","sourcesContent":["const nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n    service: 'gmail',\n    auth: {\n        user: process.env.GOOGLE_EMAIL,\n        pass: process.env.GOOGLE_PASSWORD\n    }\n});\n\nmodule.exports = {\n\n    sendEmail: (data) => {\n        const {\n            name,\n            email,\n            subject,\n            message\n        } = data;\n        const mailOptions = {\n            from: 'Client via Portfolio <contact.portfolio@gmail.com>',\n            to: process.env.MY_EMAIL,\n            subject: subject,\n            html: `<p>Name: ${name} <br/> Contact: ${email}<br/><br/>${message}</p>`,\n        };\n\n        return new Promise((resolve, reject) => {\n\n                transporter.verify(function (error, success) {\n                    if (error) {\n                        void 0;\n                    } else {\n                        return transporter.sendMail(mailOptions, function (error, info) {\n                            error ?\n                                void 0 :\n                                void 0;\n                        });\n                    }\n                });\n            })\n            .catch(err => void 0);\n    },\n\n    replyEmail: (data) => {\n        const {\n            name,\n            email\n        } = data;\n        const mailOptions = {\n            from: 'Jiah Lee <donotreply@gmail.com>',\n            to: `${name} <${email}>`,\n            subject: 'Auto reply message from Jiah Lee',\n            html: `          \n                <p>\n                    Hello ${name},<br/><br/>\n                    Thank you for getting in touch.<br/>\n                    I will reply to you as soon as possible.<br/>\n                    Thank you.<br/><br/>\n                    Best,<br/><br/>\n                    Jiah Lee\n                </p>   \n            `\n        };\n\n        return new Promise((resolve, reject) => {\n                return transporter.sendMail(mailOptions, function (error, info) {\n                    error ?\n                        void 0 :\n                        void 0;\n                });\n            })\n            .catch(err => void 0);\n    }\n};"]}