{"version":3,"sources":["index.js"],"names":["require","config","logger","bodyParser","cookieParser","express","app","port","process","env","PORT","myApi","use","urlencoded","extended","json","post","req","res","sendEmail","body","then","replyEmail","catch","err","static","cwd","next","Error","status","listen"],"mappings":"AAAAA,QAAQ,UAAUC,SAClB,MAAMC,OAASF,QAAQ,UACjBG,WAAaH,QAAQ,eACrBI,aAAeJ,QAAQ,iBACvBK,QAAUL,QAAQ,WAElBM,IAAMD,UAENE,KAAOC,QAAQC,IAAIC,MAAQ,KAE3BC,MAAQX,QAAQ,YAEtBM,IAAIM,IAAIV,OAAO,QACfI,IAAIM,IAAIT,WAAWU,YACfC,UAAU,KAEdR,IAAIM,IAAIT,WAAWY,QACnBT,IAAIM,IAAIR,gBAERE,IAAIU,KAAK,IAAK,CAACC,EAAKC,IAETP,MAAMQ,UAAUF,EAAIG,MACtBC,KAAKV,MAAMW,WAAWL,EAAIG,OAC1BG,MAAMC,QAAO,IAGtBlB,IAAIM,IAAIP,QAAQoB,UAAUjB,QAAQkB,6BAIlCpB,IAAIM,IAAI,SAAUK,EAAKC,EAAKS,GACxB,IAAIH,EAAM,IAAII,MAAM,aACpBJ,EAAIK,OAAS,IACbF,EAAKH,KAyBTlB,IAAIwB,OAAOvB,KAAM","file":"../index.js","sourcesContent":["require('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\n\nconst app = express();\n\nconst port = process.env.PORT || 8080;\n\nconst myApi = require('./api.js');\n\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n    extended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\napp.post('/', (req, res) => {\n\n    return myApi.sendEmail(req.body)\n        .then(myApi.replyEmail(req.body))\n        .catch(err => void 0);\n});\n\napp.use(express.static(`${process.cwd()}/development/client`));\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\n// development error handler\n// will print stacktrace\n// if (app.get('env') !== 'production') {\n//     app.use(function (err, req, res, next) {\n//         res.status(err.status || 500);\n//         res.status('error', {\n//             message: err.message,\n//             error: err\n//         });\n//     });\n// }\n\n// production error handler\n// no stacktraces leaked to user\n// app.use(function (err, req, res, next) {\n//     res.status(err.status || 500);\n//     res.json({\n//         message: err.message,\n//         error: {}\n//     });\n// });\n\napp.listen(port, () => {\n    void 0;\n});\n\nvoid 0;"]}