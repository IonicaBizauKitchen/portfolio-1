{"version":3,"sources":["index.js"],"names":["require","config","logger","bodyParser","express","app","env","PORT","port","process","myApi","use","urlencoded","extended","json","cookieParser","post","sendEmail","req","res","then","replyEmail","body","catch","static","cwd","next","err","Error","status","get","listen","console","log","NODE_ENV"],"mappings":"aAAAA,QAAQ,UAAUC,SAClB,IAAMC,OAASF,QAAQ,UADvBA,WAAkBC,QAAlB,eACMC,aAAiBF,QAAR,iBACTG,QAAAA,QAAaH,WAEbI,IAAAA,UAEAC,KAAMD,QAAZE,IAAAC,MAAA,KAEMC,MAAOC,QAAA,YAEbJ,IAAMK,IAAAA,OAAQV,QAGdK,IAAIM,IAAIR,WAAWS,WAAW,CAD1BD,UAAIT,KAEJW,IAAAA,IAAAA,WAAUC,QADgBT,IAA9BM,IAAAI,gBAIAV,IAAIM,KAAII,IAAAA,SAAAA,EAAAA,GAEJC,OAAKN,MAAKO,UAAAC,EAAMC,MAGXC,KAAKV,MAAMW,WAAWH,EAAII,OAD/BC,MAAOb,SAAAA,GAAAA,OAAMO,QAAUC,IAAII,OAG9BjB,IALDM,IAAAP,QAAAoB,OAAAf,QAAAgB,MAAA,wBASApB,IAAAM,IAAA,SAAAO,EAAAC,EAAAO,GACA,IAAAC,EAAA,IAAAC,MAAA,aACIjB,EAAIkB,OAAA,IACJH,EAAIC,KAKR,eAAAtB,IAAAyB,IAAA,QACAzB,IAAAM,IAAA,SAAAgB,EAAAT,EAAAC,EAAAO,GACQI,EAAID,OAARF,EAAmBE,QAAA,KACflB,EAAIkB,OAAA,QAAeX,CACfW,QAAOF,EAAIE,QACXA,MAAOF,MAOnBtB,IAAAM,IAAA,SAAAgB,EAAAT,EAAAC,EAAAO,GACAP,EAAAU,OAAAF,EAAAE,QAAA,KACIlB,EAAIG,KAAA,CACAe,QAAOF,EAAIE,QACXf,MAAK,OAIZT,IAND0B,OAAAvB,KAAA,WASIwB,QAAQC,IAAR,wBAAoCzB,KAApC,OAAAwB,QAAAA,IAAAA,cAAAvB,QAAAH,IAAA4B,SAAAF","file":"../index.js","sourcesContent":["require('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\n\nconst app = express();\n\nconst port = process.env.PORT || 8080;\n\nconst myApi = require('./api.js');\n\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n    extended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\napp.post('/', (req, res) => {\n\n    return myApi.sendEmail(req.body)\n        .then(myApi.replyEmail(req.body))\n        .catch(err => console.log(err));\n});\n\napp.use(express.static(`${process.cwd()}/development/client`));\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') !== 'production') {\n    app.use(function (err, req, res, next) {\n        res.status(err.status || 500);\n        res.status('error', {\n            message: err.message,\n            error: err\n        });\n    });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function (err, req, res, next) {\n    res.status(err.status || 500);\n    res.json({\n        message: err.message,\n        error: {}\n    });\n});\n\napp.listen(port, () => {\n    console.log(`Server is up on port ${port}!`);\n});\nconsole.log(`NODE_ENV : ${process.env.NODE_ENV} mode`);\n"]}