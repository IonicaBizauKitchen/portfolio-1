{"version":3,"sources":["api.js"],"names":["nodemailer","require","createTransport","service","transporter","process","env","GOOGLE_EMAIL","auth","GOOGLE_PASSWORD","module","exports","data","sendEmail","message","name","email","subject","mailOptions","from","MY_EMAIL","to","Promise","resolve","reject","verify","error","success","sendMail","info","console","log","response","catch","err","replyEmail","html"],"mappings":"aAAA,IAAMA,WAAaC,QAAQ,cAArBD,YAAaC,WAAQC,gBAA3B,CAGIC,QAAS,QADPC,KAAAA,CACFD,KAASE,QADkCC,IAAAC,aAE3CC,KAAMH,QAAAC,IAAAG,mBAFqCC,OAA/CC,QAAA,CAQAD,UAAA,SAAAE,GAAiB,IAEbC,EAKQC,EALRD,KAEQE,EAGAD,EAHAC,MACAC,EAEAF,EAFAE,QACAC,EACAH,EADAG,QAGEC,EAAc,CAAdA,KAAAA,qDACFC,GAAAA,QAAMb,IAAAc,SACNC,QAAIhB,EACJY,KAAAA,YAHgBF,EAGhBE,mBAHgBD,EAGhBC,aAHgBH,EAGhBG,QAIJ,OAAO,IAAIK,QAAQ,SAACC,EAASC,GAErBpB,YAAYqB,OAAO,SAAUC,EAAOC,GAApCvB,IAAYqB,EAGD,OAAArB,YAAAwB,SAAAV,EAAA,SAAAQ,EAAAG,GACIzB,EAEC0B,QAAQJ,MAARI,6BAAAJ,GAFRI,QAAAC,IAAA,eAAAF,EAAAG,YAHAN,QAAOK,IAAAL,OAHvBO,MAAA,SAAAC,GAAA,OAAAJ,QAAAJ,MAAA,wBAAAQ,MAiBJC,WAAY,SAAAvB,GAAA,IAGJI,EAEEE,EAFFF,KAGAG,EAAM,CACNE,KAAON,kCACPE,GAAAA,EAAAA,KAHEC,EAFFF,MAKAC,IACAmB,QAAAA,mCAJJA,KAAAA,oDAgBmBrB,EAhBnB,6RAgBA,OAAO,IAAIO,QAAQ,SAACC,EAASC,GACrB,OAAOpB,YAAYwB,SAASV,EAAa,SAAUQ,EAAOG,GACtDH,EACII,QAAQJ,MAAR,6BAA2CA,GAC3CI,QAAQC,IAAR,eAA2BF,EAAKG,cAG3CC,MAAM,SAAAC,GAAA,OAAOJ,QAAQJ,MAAR,yBAAuCQ","file":"../api.js","sourcesContent":["const nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n    service: 'gmail',\n    auth: {\n        user: process.env.GOOGLE_EMAIL,\n        pass: process.env.GOOGLE_PASSWORD\n    }\n});\n\nmodule.exports = {\n\n    sendEmail: (data) => {\n        const {\n            name,\n            email,\n            subject,\n            message\n        } = data;\n        const mailOptions = {\n            from: 'Client via Portfolio <contact.portfolio@gmail.com>',\n            to: process.env.MY_EMAIL,\n            subject: subject,\n            html: `<p>Name: ${name} <br/> Contact: ${email}<br/><br/>${message}</p>`,\n        };\n\n        return new Promise((resolve, reject) => {\n\n                transporter.verify(function (error, success) {\n                    if (error) {\n                        console.log(error);\n                    } else {\n                        return transporter.sendMail(mailOptions, function (error, info) {\n                            error ?\n                                console.error(`Unable to send the email: ${error}`) :\n                                console.log(`Email sent: ${info.response}`);\n                        });\n                    }\n                });\n            })\n            .catch(err => console.error(`sendEmail func err : ${err}`));\n    },\n\n    replyEmail: (data) => {\n        const {\n            name,\n            email\n        } = data;\n        const mailOptions = {\n            from: 'Jiah Lee <donotreply@gmail.com>',\n            to: `${name} <${email}>`,\n            subject: 'Auto reply message from Jiah Lee',\n            html: `\n                <p>\n                    Hello ${name},<br/><br/>\n                    Thank you for getting in touch.<br/>\n                    I will reply to you as soon as possible.<br/>\n                    Thank you.<br/><br/>\n                    Best,<br/><br/>\n                    Jiah Lee\n                </p>\n            `\n        };\n\n        return new Promise((resolve, reject) => {\n                return transporter.sendMail(mailOptions, function (error, info) {\n                    error ?\n                        console.error(`Unable to send the email: ${error}`) :\n                        console.log(`Email sent: ${info.response}`);\n                });\n            })\n            .catch(err => console.error(`replyEmail func err : ${err}`));\n    }\n};\n"]}