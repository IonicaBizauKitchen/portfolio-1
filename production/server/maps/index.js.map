{"version":3,"sources":["index.js"],"names":["require","config","logger","bodyParser","cookieParser","express","path","cors","port","process","env","PORT","myApi","app","use","urlencoded","json","post","req","res","sendEmail","body","then","replyEmail","send","console","next","Error","err","status","get","message","listen"],"mappings":"aACAA,QAAQ,UAAUC,SAAlBD,IAAAA,OAAQA,QAAUC,UACZC,WAASF,QAAQ,eACjBG,aAAaH,QAAQ,iBACrBI,QAAAA,QAAeJ,WACfK,KAAAA,QAAUL,QACVM,KAAON,QAAQ,QACfO,IAAOP,UAGPQ,KAAOC,QAAQC,IAAIC,MAAQ,KAE3BC,MAAQZ,QAAQ,YAEtBa,IAAIC,IAAIP,QAARM,IAAIC,IAAIP,OAAR,QACAM,IAAIC,IAAIZ,WAAOa,WAAf,CACAF,UAAQV,KAAsBU,IAA9BC,IAAAX,WAAAa,QAGAH,IAAIC,IAAIX,gBAQRU,IAAII,KAAK,eAAgB,SAACC,EAAKC,GAA/BN,OAAAD,MAASQ,UAATF,EAAyBG,MACxBC,KAAOV,WAELA,MAAMW,WAAWL,EAAIG,MACrBF,EAAIK,KAAK,8BAEMC,MAAAA,SAAAA,QAIlBZ,IAAAC,IAAA,SAAAI,EAAAC,EAAAO,GACAb,IAAIC,EAAI,IAAAa,MAAA,aACPC,EAAIA,OAAM,IACVA,EAAIC,KAKL,eAAAhB,IAAAiB,IAAA,OACAjB,IAAIA,IAAIiB,SAAJF,EAAmBV,EAAAC,GACtBN,EAAIC,OAAIc,EAAAC,QAAA,KACPV,EAAIU,KAAAA,CACJV,QAASS,EAAAG,QACRA,MAAAA,MAMFlB,IAAAC,IAAA,SAAAc,EAAAV,EAAAC,GACAN,EAAIC,OAAIc,EAAAC,QAAA,KACPV,EAAIU,KAAAA,CACJV,QAASS,EAAAG,QACRA,MAAAA,OAMHlB,IAAImB,OAAOxB,KAAM","file":"../index.js","sourcesContent":["\nrequire('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\nconst path = require('path');\nconst cors = require('cors');\nconst app = express();\n\nconst port = process.env.PORT || 8080;\n\nconst myApi = require('./api.js');\n\napp.use(cors());\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n\textended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\n// app.use('/vendors', express.static(`${process.cwd()}/vendors`));\n// app.use('/resources', express.static(path.join(__dirname, '../', 'client/resources')));\n// app.use(express.static(`${process.cwd()}/static`));\n// app.get('/', (req, res) => res.sendFile(path.join(__dirname, '/views/index.html')));\n\napp.post('/api/contact', (req, res) => {\n\treturn myApi.sendEmail(req.body)\n\t\t.then(() => {\n\t\t\tmyApi.replyEmail(req.body);\n\t\t\tres.send('Email Sent Successfully!');\n\t\t})\n\t\t.catch(err => { console.log(err); });\n});\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n\tvar err = new Error('Not Found');\n\terr.status = 404;\n\tnext(err);\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') !== 'production') {\n\tapp.use(function (err, req, res) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: err\n\t\t});\n\t});\n} else {\n\t// production error handler\n\t// no stacktraces leaked to user\n\tapp.use(function (err, req, res) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: {}\n\t\t});\n\t});\n}\n\napp.listen(port, () => {\n\tconsole.log(`Server is up on port ${port}!`);\n});\nconsole.log(`NODE_ENV : ${process.env.NODE_ENV} mode`);\n\n\n"]}