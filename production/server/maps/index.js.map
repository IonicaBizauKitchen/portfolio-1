{"version":3,"sources":["index.js"],"names":["require","config","logger","bodyParser","cookieParser","express","cors","port","process","env","PORT","myApi","corsOptions","origin","app","use","urlencoded","json","get","req","res","static","cwd","__dirname","path","join","post","sendEmail","body","then","replyEmail","status","send","catch","err","next","Error","console","error","message","listen"],"mappings":"aACAA,QAAQ,UAAUC,SAAlBD,IAAAA,OAAQA,QAAUC,UACZC,WAASF,QAAQ,eACjBG,aAAaH,QAAQ,iBACrBI,QAAAA,QAAeJ,WACfK,KAAAA,QAAUL,QACVM,IAAON,UAGPO,KAAOC,QAAQC,IAAIC,MAAQ,KAE3BC,MAAQX,QAAQ,YAEhBY,YAAc,CAApBC,OAAMD,2BACLC,qBAAQ,KAITC,IAAIC,IAAIT,KAAKM,cAAbE,IAAIC,IAAIT,OAAKM,QACbE,IAAIC,IAAIb,WAAOc,WAAf,CACAF,UAAQX,KAAsBW,IAA9BC,IAAAZ,WAAAc,QAGAH,IAAIC,IAAIZ,gBAWe,eAAnBW,IAAII,IAAI,OAAZJ,IAAIA,IAAII,IAAI,SAAAC,EAARC,GACHN,EAAII,SAAS,+BADdJ,IAAAC,IAIO,WAAAV,QAAAgB,OAAAb,QAAAc,MAAA,aACNR,IAAIC,IAAI,aAAYV,QAAQgB,OAAUb,KAAAA,KAAAe,UAAlB,MAApB,sBACAT,IAAIC,IAAIV,QAAAgB,OAAchB,QAAQgB,MAAtB,YACRP,IAAIC,IAAIV,IAAAA,SAAAA,EAAQgB,GAARhB,OAAkBG,EAAQc,SAA1BE,KAAAC,KAARF,UAAA,yBACaT,IAAbY,KAAA,eAAA,SAAAP,EAAAC,GACA,OAAAT,MAAAgB,UAAAR,EAAAS,MAIEC,KAAK,WAAA,OAAMlB,MAAMmB,WAAWX,EAAIS,QAFnCd,KAAA,WAAA,OAASM,EAAAW,OAAgB,KAAAC,KAACb,8BACzBc,MAAOtB,SAAAA,GAAAS,EAELS,OAAK,KAAAZ,KAAAiB,OAKPpB,IARDC,IAAA,SAAAoB,GAaC,IAAID,EAAM,IAAIE,MAAM,aAHrBF,EAAAH,OAAA,IACAI,EAAAD,KACA,eAAApB,IAAAI,IAAA,OAOAJ,IAAAC,IAAA,SAAAmB,EAAAf,EAAAC,GAECA,EAAAW,OAAAG,EAAAH,QAAA,KACAX,EAAAH,KAAA,CACAH,QAAQ,uBACPuB,MAAQC,OAIPA,IAAAA,IAAAA,SAAOJ,EAAAf,EAAAC,GALTA,EAAAW,OAAAG,EAAAH,QAAA,KAHDX,EAAAH,KAWO,CACNH,QAAQoB,EAAAK,QACPF,MAAQC,MAECxB,IAAT0B,OAAAjC,KAAA","file":"../index.js","sourcesContent":["\nrequire('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\n\nconst port = process.env.PORT || 8080;\n\nconst myApi = require('./api.js');\n\nconst corsOptions = {\n\torigin: 'https://jin827.github.io',\n\toptionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n};\n\napp.use(cors(corsOptions));\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n\textended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n/*\napp.use((req, res, next) => {\n\tres.header('Access-Control-Allow-Origin', '*');\n\tres.header('Access-Control-Allow-Methods', 'GET, OPTIONS, PATCH, POST, DELETE');\n\tres.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n\tres.header('Access-Control-Allow-Credentials', true);\n\tnext();\n});*/\n\nif (app.get('env') === 'production') {\n\tapp.get('/', (req, res) => {\n\t\tres.redirect('https://jin827.github.io');\n\t});\n} else {\n\tapp.use('/vendors', express.static(`${process.cwd()}/vendors`));\n\tapp.use('/resources', express.static(path.join(__dirname, '../', 'client/resources')));\n\tapp.use(express.static(`${process.cwd()}/static`));\n\tapp.get('/', (req, res) => res.sendFile(path.join(__dirname, '/views/index.html')));\n}\n\napp.post('/api/contact', (req, res) => {\n\treturn myApi.sendEmail(req.body)\n\t\t.then(() => myApi.replyEmail(req.body))\n\t\t.then(() => res.status(201).send('Email Sent Successfully!'))\n\t\t.catch(err => {\n\t\t\tconsole.error(err);\n\t\t\tres.status(400).json(err);\n\t\t});\n});\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (next) {\n\tvar err = new Error('Not Found');\n\terr.status = 404;\n\tnext(err);\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'production') {\n\t// production error handler\n\t// no stacktraces leaked to user\n\tapp.use(function (err, req, res) {\n\t\tconsole.error(err);\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: 'An error has occured',\n\t\t\terror: {}\n\t\t});\n\t});\n} else {\n\tapp.use(function (err, req, res) {\n\t\tconsole.error(err);\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: err\n\t\t});\n\t});\n}\n\napp.listen(port, () => {\n\tconsole.log(`Server is up on port ${port}!`);\n});\nconsole.log(`NODE_ENV : ${process.env.NODE_ENV} mode`);\n"]}