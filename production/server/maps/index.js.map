{"version":3,"sources":["index.js"],"names":["require","config","logger","bodyParser","cookieParser","express","cors","port","process","env","PORT","myApi","app","use","urlencoded","json","get","req","res","post","status","send","next","Error","err","message","listen"],"mappings":"aACAA,QAAQ,UAAUC,SAAlBD,IAAAA,OAAQA,QAAUC,UACZC,WAASF,QAAQ,eACjBG,aAAaH,QAAQ,iBACrBI,QAAAA,QAAeJ,WACfK,KAAAA,QAAUL,QACVM,IAAON,UAGPO,KAAOC,QAAQC,IAAIC,MAAQ,KAE3BC,MAAQX,QAAQ,YAEtBY,IAAIC,IAAIP,QAARM,IAAIC,IAAIP,OAAR,QACAM,IAAIC,IAAIX,WAAOY,WAAf,CACAF,UAAQT,KAAsBS,IAA9BC,IAAAV,WAAAY,QAGAH,IAAIC,IAAIV,gBAMRS,IAAAI,IAAA,IAAA,SAAAC,EAAAC,GACAN,EAAII,SAAS,8BAIbJ,IAAIO,KAAK,eAAgB,SAACF,EAAKC,GAU9BA,EAAAE,OAAA,KAAAC,KAAA,qBAKDT,IAAAC,IAAA,SAAAS,GACAV,IAAIC,EAAI,IAAAU,MAAUD,aACjBE,EAAIA,OAAM,IACVA,EAAIJ,KAKL,eAAAR,IAAAI,IAAA,OACAJ,IAAIA,IAAII,SAAJQ,EAAmBN,GACtBN,EAAIC,OAAIW,EAAAJ,QAAA,KACPF,EAAIE,KAAAA,CACJF,QAASM,EAAAC,QACRA,MAAAA,MAMFb,IAAAC,IAAA,SAAAW,EAAAN,GACAN,EAAIC,OAAIW,EAAAJ,QAAA,KACPF,EAAIE,KAAAA,CACJF,QAASM,EAAAC,QACRA,MAAAA,OAMHb,IAAIc,OAAOnB,KAAM","file":"../index.js","sourcesContent":["\nrequire('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\n\nconst port = process.env.PORT || 8080;\n\nconst myApi = require('./api.js');\n\napp.use(cors());\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n\textended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\n// app.use('/vendors', express.static(`${process.cwd()}/vendors`));\n// app.use('/resources', express.static(path.join(__dirname, '../', 'client/resources')));\n// app.use(express.static(`${process.cwd()}/static`));\n// app.get('/', (req, res) => res.sendFile(path.join(__dirname, '/views/index.html')));\napp.get('/', (req, res) => {\n\tres.redirect('https://jin827.github.io');\n});\n\napp.post('/api/contact', (req, res) => {\n\t// return myApi.sendEmail(req.body)\n\t// \t.then(() => {\n\t// \t\tmyApi.replyEmail(req.body).then(() => {\n\t// \t\t\tres.send('Email Sent Successfully!');\n\t// \t\t});\n\t// \t})\n\t// \t.catch(err => {\n\t// \t\tres.status(500).send('Email not sent!');\n\t// \t\tconsole.log(err);\n\t// \t});\n  res.status(500).send('Email not sent!');\n});\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (next) {\n\tvar err = new Error('Not Found');\n\terr.status = 404;\n\tnext(err);\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') !== 'production') {\n\tapp.use(function (err, res) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: err\n\t\t});\n\t});\n} else {\n\t// production error handler\n\t// no stacktraces leaked to user\n\tapp.use(function (err, res) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: {}\n\t\t});\n\t});\n}\n\napp.listen(port, () => {\n\tconsole.log(`Server is up on port ${port}!`);\n});\nconsole.log(`NODE_ENV : ${process.env.NODE_ENV} mode`);\n\n\n"]}