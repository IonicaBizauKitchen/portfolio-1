{"version":3,"sources":["index.js"],"names":["require","config","logger","bodyParser","cookieParser","express","cors","port","process","env","PORT","myApi","corsOptions","origin","app","use","urlencoded","json","req","res","next","header","end","get","post","sendEmail","body","then","replyEmail","catch","err","status","send","Error","listen"],"mappings":"aACAA,QAAQ,UAAUC,SAAlBD,IAAAA,OAAQA,QAAUC,UACZC,WAASF,QAAQ,eACjBG,aAAaH,QAAQ,iBACrBI,QAAAA,QAAeJ,WACfK,KAAAA,QAAUL,QACVM,IAAON,UAGPO,KAAOC,QAAQC,IAAIC,MAAQ,KAE3BC,MAAQX,QAAQ,YAEhBY,YAAc,CAApBC,OAAMD,2BACLC,qBAAQ,KAITC,IAAIC,IAAIT,KAAKM,cAAbE,IAAIC,IAAIT,OAAKM,QACbE,IAAIC,IAAIb,WAAOc,WAAf,CACAF,UAAQX,KAAsBW,IAA9BC,IAAAZ,WAAAc,QAGAH,IAAIC,IAAIZ,gBAGRW,IAAIC,IAAI,SAACG,EAAKC,EAAKC,GAAnBN,EAAIC,OAAI,8BAAoB,KAC3BI,EAAIE,OAAO,+BAA+B,qCAC1CF,EAAIE,OAAO,oCAAgC,GAC3CF,EAAIE,OAAO,+BAAA,iEAEXF,EAAAG,QAODR,IAAAS,IAAA,IAAA,SAAAL,EAAAC,GACAL,EAAIS,SAAS,8BAIbT,IAAIU,KAAK,eAAgB,SAACN,EAAKC,GAA/BL,OAAAH,MAASc,UAATP,EAAyBQ,MACxBC,KAAOhB,WAAAA,OAAMc,MAAAA,WAAcC,EACzBC,QAAKA,KAAA,WAAA,OAAMhB,EAAMiB,KAAAA,8BADZC,MAEA,SAAAC,GAAAX,EAAAY,OAAUC,KAAKA,KAAA,uBAiBvBlB,IAAAC,IAAA,SAAAK,GACA,IAAAU,EAAA,IAAAG,MAAA,aACAnB,EAAIC,OAAI,IACPK,EAAIU,KAKL,eAAAhB,IAAAS,IAAA,OACAT,IAAAC,IAAA,SAAAe,EAAAX,GACAA,EAAIL,OAAQgB,EAARC,QAAmB,KACtBjB,EAAIC,KAAI,CACPI,QAAAW,EAAWA,QACXX,MAAAW,MAMDhB,IAAAC,IAAA,SAAAe,EAAAX,GACAA,EAAAY,OAAAD,EAAAC,QAAA,KACAjB,EAAIC,KAAI,CACPI,QAAAW,EAAWA,QACXX,MAAA,OAKDL,IAAAoB,OAAA3B,KAAA","file":"../index.js","sourcesContent":["\nrequire('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\n\nconst port = process.env.PORT || 8080;\n\nconst myApi = require('./api.js');\n\nconst corsOptions = {\n\torigin: 'https://jin827.github.io',\n\toptionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n};\n\napp.use(cors(corsOptions));\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n\textended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\napp.use((req, res, next) => {\n\tres.header('Access-Control-Allow-Origin', '*');\n\tres.header('Access-Control-Allow-Methods', 'GET, OPTIONS, PATCH, POST, DELETE');\n\tres.header('Access-Control-Allow-Credentials', true);\n\tres.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n\t// next();\n\tres.end();\n});\n\n// app.use('/vendors', express.static(`${process.cwd()}/vendors`));\n// app.use('/resources', express.static(path.join(__dirname, '../', 'client/resources')));\n// app.use(express.static(`${process.cwd()}/static`));\n// app.get('/', (req, res) => res.sendFile(path.join(__dirname, '/views/index.html')));\napp.get('/', (req, res) => {\n\tres.redirect('https://jin827.github.io');\n});\n\napp.post('/api/contact', (req, res) => {\n\treturn myApi.sendEmail(req.body)\n\t\t.then(() => myApi.replyEmail(req.body))\n\t\t.then(() => res.send('Email Sent Successfully!'))\n\t\t.catch(err => {\n\t\t\tres.status(500).send('Email not sent!');\n\t\t\tconsole.log(err);\n\t\t});\n});\n\n// function sendMessage (req, res, next) {\n// \tmyApi.sendEmail(req.body);\n// \treturn next();\n// }\n\n// function sendAutoReply (req, res, next) {\n// \tmyApi.replyEmail(req.body);\n// \treturn next();\n// }\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (next) {\n\tvar err = new Error('Not Found');\n\terr.status = 404;\n\tnext(err);\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') !== 'production') {\n\tapp.use(function (err, res) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: err\n\t\t});\n\t});\n} else {\n\t// production error handler\n\t// no stacktraces leaked to user\n\tapp.use(function (err, res) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: {}\n\t\t});\n\t});\n}\n\napp.listen(port, () => {\n\tconsole.log(`Server is up on port ${port}!`);\n});\nconsole.log(`NODE_ENV : ${process.env.NODE_ENV} mode`);\n"]}