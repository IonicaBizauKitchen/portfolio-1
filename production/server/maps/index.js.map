{"version":3,"sources":["index.js"],"names":["require","config","logger","bodyParser","cookieParser","express","cors","app","path","geoip","env","PORT","myApi","origin","optionsSuccessStatus","use","corsOptions","extended","json","en","kr","SUPPORTED_LANGUAGES","get","req","res","next","_lang","query","lang","cookies","cookie","redirect","requestIp","mw","lookup","static","process","cwd","join","__dirname","sendFile","post","sendEmail","body","replyEmail","then","catch","status","err","Error","console","error","message","listen","port"],"mappings":"aAAAA,QAAQ,UAAUC,SAClB,IAAMC,OAASF,QAAQ,UADvBA,WAAkBC,QAAlB,eACMC,aAAiBF,QAAR,iBACTG,QAAAA,QAAaH,WACbI,KAAAA,QAAeJ,QACfK,IAAAA,UACAC,KAAON,QAAQ,QACfO,UAAMF,QAAZ,cACMG,MAAOR,QAAQ,iBAEfS,KAAQT,QAAQU,IAAAC,MAAA,KAGhBC,MAAQZ,QAAQ,YAAhBY,YAAgB,CAGrBC,OAAQ,2BADTC,qBAAoB,KAAAP,IAApBQ,IAAAT,KAAAU,cAMAT,IAAIQ,IAAIb,OAAO,QADfK,IAAIQ,IAAIT,WAAKU,WAAb,CACAT,UAAQL,KAEPe,IAAAA,IAAAA,WAAUC,QADmBX,IAA9BQ,IAAAX,gBAIAG,IAAIQ,oBAAJ,CAGCI,GAAI,EADLC,GAAMC,GAMNd,IAAIe,IAAI,IAAK,SAACC,EAAKC,EAAKC,GAMtB,GAPFF,EAAAG,MAAAH,EAAAI,MAAAC,MAAAL,EAAAM,QAAAD,KACIN,oBAAUC,EAAKC,OAClBD,EAAIG,OAAQH,OAAII,EAAMC,OAErBJ,EAAIM,MAAO,KAGXP,EAAAI,MAAAC,KAGA,OAAOJ,EAAIO,SAAS,KAApBN,MAMFlB,IAAIQ,IAAIiB,UAAUC,MADlB1B,IAAAQ,IAAA,SAAAQ,EAAAC,EAAAC,GACQO,EAAAA,SACRzB,EAAIQ,IAAIN,MAAAyB,OAAMV,gBACbC,MADD,eAAAlB,IAAAe,IAAA,OAOCf,IAAIe,IAAI,IAAK,SAACC,EAAKC,GADpBA,EAAIjB,SAAJ,kCAAqCgB,EAAAG,MAArC,YAGEnB,IAFDQ,IAAA,WAAAV,QAAA8B,OAAAC,QAAAC,MAAA,aADD9B,IAAAQ,IAIO,aAAAV,QAAA8B,OAAA3B,KAAA8B,KAAAC,UAAA,MAAA,sBACNhC,IAAIQ,IAAIV,QAAA8B,OAAY9B,QAAAgC,MAAZ,YAER9B,IAAIQ,IAAIV,MAAAA,SAAkB+B,EAAAA,GAGzBZ,EAAIgB,SAAShC,KAAK8B,KAAKC,UAAW,2BAAlCf,IAAAA,IAAIgB,MAAShC,SAAU+B,EAAAA,GADxBf,EAAAgB,SAAAhC,KAAA8B,KAAAC,UAAA,2BAICf,IAAAA,IAAIgB,cAAS,SAAAjB,EAAqBC,GADnCA,EAAAgB,SAAAhC,KAAA8B,KAAAC,UAAA,wBAKChC,IAFDe,IAAA,IAAA,SAAAC,EAAAC,GAKCA,EAAIgB,SAAShC,KAAK8B,KAAKC,UAAV,UAA+BhB,EAAIG,MAAnC,mBAWdnB,IAAAkC,KAAA,eAAA,SAAAlB,EAAAC,GAGA,OAAOZ,MAAM8B,UAAUnB,EAAIoB,MAD5BpC,KAAA,WAAA,OAASK,MAAAgC,WAAgBrB,EAACA,QACzBsB,KAAOjC,WAAAA,OAAM8B,EAAAA,OAAUnB,KAAIoB,KACzBE,8BAAKC,MAAMlC,SAAAA,GACNY,EAAAuB,OAAUA,KAAJ7B,KAAA8B,OASdzC,IAAIQ,IAAI,SAAUiC,EAAKzB,EAAKC,EAAKC,GAFjC,IAAAwB,MAAA,aACAD,EAAAD,OAAA,IACAxC,EAAIQ,KAQmB,eAAnBR,IAAIe,IAAI,OAAZf,IAAIA,IAAIe,SAAAA,EAAIC,EAARC,EAAmBC,GAEtBD,EAAAuB,OAAAC,EAAAD,QAAA,KACAxC,EAAIQ,KAAI,CACPmC,QAAQC,uBACR3B,MAAIuB,KAEHK,MAGD3B,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAVFD,EAAAuB,OAYOC,EAAAD,QAAA,KACNxC,EAAIQ,KAAI,CACPmC,QAAQC,EAAMH,QACdxB,MAAIuB,IAEHK,MAID7C,IARD8C,OAAAC,KAAA","file":"../index.js","sourcesContent":["require('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\nconst path = require('path');\nconst requestIp = require('request-ip');\nconst geoip = require('geoip-country');\n\nconst port = process.env.PORT || 9900;\nconst myApi = require('./api.js');\n\nconst corsOptions = {\n\torigin: 'https://jin827.github.io',\n\toptionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n};\n\napp.use(cors(corsOptions));\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n\textended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\nconst SUPPORTED_LANGUAGES = {\n\ten: 1,\n\tkr: 1\n};\n\n// Set in the session the language we want to use\napp.get('/', (req, res, next) => {\n\treq._lang = req.query.lang || req.cookies.lang;\n\tif (SUPPORTED_LANGUAGES[req._lang]) {\n\t\tres.cookie('lang', req._lang);\n\t} else {\n\t\treq._lang = 'en';\n\t}\n\n\tif (req.query.lang) {\n\t\treturn res.redirect('/');\n\t}\n\tnext();\n});\n\n// get user IP & geoLocation\napp.use(requestIp.mw());\napp.use((req, res, next) =>{\n\tconst ip = req.clientIp;\n\treq.geo = geoip.lookup('1.11.255.255');\n\tnext();\n});\n\nif (app.get('env') === 'production') {\n\tapp.get('/', (req, res) => {\n\t\tres.redirect(`https://jin827.github.io/index-${req._lang}.html`);\n\t});\n} else {\n\tapp.use('/vendors', express.static(`${process.cwd()}/vendors`));\n\tapp.use('/resources', express.static(path.join(__dirname, '../', 'client/resources')));\n\tapp.use(express.static(`${process.cwd()}/static`));\n\n\tapp.get('/kr', function (req, res) {\n\t\tres.sendFile(path.join(__dirname, '/views/kr/index.html'));\n\t});\n\tapp.get('/en', function (req, res) {\n\t\tres.sendFile(path.join(__dirname, '/views/en/index.html'));\n\t});\n\tapp.get('/index.html', function (req, res) {\n\t\tres.sendFile(path.join(__dirname, '/views/index.html'));\n\t});\n\n\tapp.get('/', (req, res) => {\n\t\tres.sendFile(path.join(__dirname, `/views/${req._lang}/index.html`));\n\t\t// const geoIp = req.geo;\n\t\t// if(geoIp) {\n\t\t// \tif(geoIp.country kr== 'KR'){\n\t\t// \t\treturn res.sendFile(path.join(__dirname, '/views/index-kr.html'));\n\t\t// \t}\n\t\t// \treturn res.sendFile(path.join(__dirname, '/views/index-en.html'));\n\t\t// }\n\t\t// return res.sendFile(path.join(__dirname, '/views/index-en.html'));\n\t\t// res.sendFile(`${process.cwd()}/src/server/views/index.html`);\n\t});\n}\n\napp.post('/api/contact', (req, res) => {\n\treturn myApi.sendEmail(req.body)\n\t\t.then(() => myApi.replyEmail(req.body))\n\t\t.then(() => res.status(201).send('Email Sent Successfully!'))\n\t\t.catch(err => {\n\t\t\tconsole.error(err);\n\t\t\tres.status(400).json(err);\n\t\t});\n});\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (err, req, res, next) {\n\tnew Error('Not Found');\n\terr.status = 404;\n\tnext(err);\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'production') {\n\t// production error handler\n\t// no stacktraces leaked to user\n\tapp.use((err, req, res, next) => {\n\t\tconsole.error(err);\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: 'An error has occured',\n\t\t\terror: {}\n\t\t});\n\t\tnext();\n\t});\n} else {\n\tapp.use((err, req, res, next) => {\n\t\tconsole.error(err);\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: err\n\t\t});\n\t\tnext();\n\t});\n}\n\napp.listen(port, () => {\n\tconsole.log(`Server is up on port ${port}!`);\n});\nconsole.log(`NODE_ENV : ${process.env.NODE_ENV} mode`);\n"]}