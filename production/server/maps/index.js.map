{"version":3,"sources":["index.js"],"names":["require","config","logger","bodyParser","cookieParser","express","path","port","process","env","PORT","myApi","app","use","urlencoded","json","static","cwd","__dirname","join","post","res","sendFile","sendEmail","req","body","then","replyEmail","err","next","Error","status","get","message","listen"],"mappings":"aACAA,QAAQ,UAAUC,SAAlBD,IAAAA,OAAQA,QAAUC,UACZC,WAASF,QAAQ,eACjBG,aAAaH,QAAQ,iBACrBI,QAAAA,QAAeJ,WACfK,KAAAA,QAAUL,QACVM,IAAON,UAGPO,KAAOC,QAAQC,IAAIC,MAAQ,KAE3BC,MAAQX,QAAQ,YAEtBY,IAAIC,IAAIX,OAAO,QAAfU,IAAIC,IAAIX,WAAOY,WAAf,CACAF,UAAQT,KAAsBS,IAA9BC,IAAAV,WAAAY,QAGAH,IAAIC,IAAIV,gBAGRS,IAAIC,IAAI,WAAYR,QAAQW,OAAUR,QAAQS,MAA1B,aAApBL,IAAIC,IAAI,aAAYR,QAAQW,OAAUR,KAAAA,KAAAU,UAAlB,MAApB,sBACAN,IAAIC,IAAIR,QAAAW,OAAcX,QAAQW,MAAtB,YACRJ,IAAIC,IAAIR,IAAAA,SAAAA,EAAQW,GAARX,OAAkBG,EAAQS,SAA1BX,KAAAa,KAARD,UAAA,wBACaN,IAAAQ,KAAcC,IAAIC,SAAAA,EAAJD,GAA3B,OAAAV,MAAAY,UAAAC,EAAAC,MAIGC,KAAKf,MAAMgB,WAAWH,EAAIC,OAF7Bb,MAAS,SAAAgB,QAQThB,IAAIC,IAAI,SAAUW,EAAKH,EAAKQ,GAF5B,IAAAD,EAAA,IAAAE,MAAA,aACAF,EAAAG,OAAA,IACAnB,EAAIC,KAQmB,eAAnBD,IAAIoB,IAAI,OAFZpB,IAAAC,IAAA,SAAAe,EAAAJ,EAAAH,EAAAQ,GACAR,EAAAU,OAAAH,EAAAG,QAAA,KACAV,EAAIT,KAAA,CACHA,QAAQgB,EAAAK,QACPZ,MAAIU,MAFNnB,IAAAC,IAQO,SAAAe,EAAAJ,EAAAH,EAAAQ,GACNR,EAAAU,OAAAH,EAAAG,QAAA,KACAV,EAAAN,KAAA,CACAH,QAAQgB,EAAAK,QACPZ,MAAIU,OAiBNnB,IAAAsB,OAAA3B,KAAA","file":"../index.js","sourcesContent":["\nrequire('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\nconst port = process.env.PORT || 8080;\n\nconst myApi = require('./api.js');\n\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n\textended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\napp.use('/vendors', express.static(`${process.cwd()}/vendors`));\napp.use('/resources', express.static(path.join(__dirname, '../', 'client/resources')));\napp.use(express.static(`${process.cwd()}/static`));\napp.get('/', (req, res) => res.sendFile(path.join(__dirname, '/views/index.html')));\n\napp.post('/', (req, res) => {\n\treturn myApi.sendEmail(req.body)\n\t\t.then(myApi.replyEmail(req.body))\n\t\t.catch(err => { console.log(err); });\n});\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n\tvar err = new Error('Not Found');\n\terr.status = 404;\n\tnext(err);\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') !== 'production') {\n\tapp.use(function (err, req, res, next) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: err\n\t\t});\n\t});\n} else {\n\t// production error handler\n\t// no stacktraces leaked to user\n\tapp.use(function (err, req, res, next) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: {}\n\t\t});\n\t});\n}\n\n// if (process.env.NODE_ENV === \"production\") {\n// \tapp.use((req, res, next) => {\n// \t\tif (!/https/.test(req.protocol)) {\n// \t\t\t// request was via https, so do no special handling\n// \t\t\tnext();\n// \t\t} else {\n// \t\t\t// request was via http, so redirect to https\n// \t\t\tres.redirect('https://' + req.headers.host + req.url);\n// \t\t}\n// \t});\n// }\n\napp.listen(port, () => {\n\tconsole.log(`Server is up on port ${port}!`);\n});\nconsole.log(`NODE_ENV : ${process.env.NODE_ENV} mode`);\n\n\n"]}