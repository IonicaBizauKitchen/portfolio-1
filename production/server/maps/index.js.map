{"version":3,"sources":["index.js"],"names":["require","config","logger","bodyParser","cookieParser","express","cors","path","port","process","env","PORT","myApi","app","use","urlencoded","json","get","req","res","redirect","post","sendEmail","body","then","replyEmail","send","status","console","err","Error","next","message","error","log"],"mappings":"aACAA,QAAQ,UAAUC,SAAlBD,IAAAA,OAAQA,QAAUC,UACZC,WAASF,QAAQ,eACjBG,aAAaH,QAAQ,iBACrBI,QAAAA,QAAeJ,WACfK,KAAAA,QAAUL,QACVM,KAAON,QAAQ,QACfO,IAAOP,UAGPQ,KAAOC,QAAQC,IAAIC,MAAQ,KAE3BC,MAAQZ,QAAQ,YAEtBa,IAAIC,IAAIR,QAARO,IAAIC,IAAIR,OAAR,QACAO,IAAIC,IAAIZ,WAAOa,WAAf,CACAF,UAAQV,KAAsBU,IAA9BC,IAAAX,WAAAa,QAGAH,IAAIC,IAAIX,gBASRU,IAAII,IAAI,IAAK,SAACC,EAAKC,GAIlBA,EAAAC,SAAA,8BAKDP,IAAIQ,KAAK,eAAgB,SAACH,EAAKC,GAA/BN,OAAAD,MAASU,UAATJ,EAAyBK,MACxBC,KAAOZ,WAELA,MAAMa,WAAWP,EAAIK,MAAMC,KAAK,WAC/BL,EAAIO,KAAK,gCAIVP,MAAIQ,SAAAA,GACJC,EAAAA,OAAYC,KAAZH,KAAA,uBAOFb,IAAAC,IAAIe,SAAUC,GACdD,IAAIF,EAAJ,IAAaG,MAAb,aACAC,EAAAA,OAAA,IAHDA,EAAAF,KASS,eAARhB,IAAAI,IAAQ,OACPE,IAAAA,IAAIQ,SAAWA,EAAJR,GACXA,EAAIH,OAAKa,EAAAF,QAAA,KACRK,EAAAA,KAAAA,CACAC,QAAOJ,EAAAA,QAFRI,MAAAJ,MASAV,IAAAA,IAAIQ,SAAWA,EAAJR,GACXA,EAAIH,OAAKa,EAAAF,QAAA,KACRK,EAAAA,KAAAA,CACAC,QAAOJ,EAAAG,QAFRC,MAAA,OAQDL,IAAAA,OAAQM,KAAR","file":"../index.js","sourcesContent":["\nrequire('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\nconst cors = require('cors');\nconst path = require('path');\nconst app = express();\n\nconst port = process.env.PORT || 8080;\n\nconst myApi = require('./api.js');\n\napp.use(cors());\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n\textended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\n// if (process.env.NODE_ENV !== 'production') {\n// \tapp.use('/vendors', express.static(`${process.cwd()}/vendors`));\n// \tapp.use('/resources', express.static(path.join(__dirname, '../', 'client/resources')));\n// \tapp.use(express.static(`${process.cwd()}/static`));\n// }\n\napp.get('/', (req, res) => {\n\t// if (app.get('env') !== 'production') {\n\t// \tres.sendFile(path.join(__dirname, '/views/index.html'));\n\t// } else {\n\t// Not to reach Heroku limit\n\tres.redirect('https://jin827.github.io');\n\t// }\n});\n\napp.post('/api/contact', (req, res) => {\n\treturn myApi.sendEmail(req.body)\n\t\t.then(() => {\n\t\t\tmyApi.replyEmail(req.body).then(() => {\n\t\t\t\tres.send('Email Sent Successfully!');\n\t\t\t});\n\t\t})\n\t\t.catch(err => {\n\t\t\tres.status(500).send('Email not sent!');\n\t\t\tconsole.log(err);\n\t\t});\n});\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (next) {\n\tvar err = new Error('Not Found');\n\terr.status = 404;\n\tnext(err);\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') !== 'production') {\n\tapp.use(function (err, res) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: err\n\t\t});\n\t});\n} else {\n\t// production error handler\n\t// no stacktraces leaked to user\n\tapp.use(function (err, res) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: {}\n\t\t});\n\t});\n}\n\napp.listen(port, () => {\n\tconsole.log(`Server is up on port ${port}!`);\n});\n\n\n"]}