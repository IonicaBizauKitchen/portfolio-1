{"version":3,"sources":["index.js"],"names":["require","config","logger","bodyParser","cookieParser","express","cors","port","process","env","PORT","myApi","corsOptions","origin","app","use","urlencoded","json","req","res","next","header","get","post","sendEmail","body","then","replyEmail","send","status","console","err","Error","message","error","log"],"mappings":"aACAA,QAAQ,UAAUC,SAAlBD,IAAAA,OAAQA,QAAUC,UACZC,WAASF,QAAQ,eACjBG,aAAaH,QAAQ,iBACrBI,QAAAA,QAAeJ,WACfK,KAAAA,QAAUL,QACVM,IAAON,UAGPO,KAAOC,QAAQC,IAAIC,MAAQ,KAE3BC,MAAQX,QAAQ,YAEhBY,YAAc,CAApBC,QAAMD,EACLC,qBADmB,KAKpBC,IAAIC,IAAIT,KAAKM,cAAbE,IAAIC,IAAIT,OAAKM,QACbE,IAAIC,IAAIb,WAAOc,WAAf,CACAF,UAAQX,KAAsBW,IAA9BC,IAAAZ,WAAAc,QAGAH,IAAIC,IAAIZ,gBAGRW,IAAIC,IAAI,SAASG,EAAKC,EAAKC,GAA3BN,EAAIC,OAAI,8BAAyB,KAChCI,EAAIE,OAAO,+BAA+B,qCAC1CF,EAAIE,OAAO,+BAAgC,sCAC3CF,EAAIE,OAAO,oCAAgC,GAE3CD,MAODN,IAAAQ,IAAA,IAAA,SAAAJ,EAAAC,GACAL,EAAIQ,SAAS,8BAIbR,IAAIS,KAAK,eAAgB,SAACL,EAAKC,GAA/BL,OAAAH,MAASa,UAATN,EAAyBO,MACxBC,KAAOf,WAELA,MAAMgB,WAAWT,EAAIO,MAAMC,KAAK,WAC/BP,EAAIS,KAAK,gCAIVT,MAAIU,SAAAA,GACJC,EAAAA,OAAYC,KAAZH,KAAA,uBAOFd,IAAAC,IAAIgB,SAAUC,GACdD,IAAIF,EAAJ,IAAaG,MAAb,aACAZ,EAAAA,OAAA,IAHDA,EAAAW,KASS,eAARjB,IAAAQ,IAAQ,OACPH,IAAAA,IAAIU,SAAWA,EAAJV,GACXA,EAAIF,OAAKc,EAAAF,QAAA,KACRI,EAAAA,KAAAA,CACAC,QAAOH,EAAAA,QAFRG,MAAAH,MASAZ,IAAAA,IAAIU,SAAWA,EAAJV,GACXA,EAAIF,OAAKc,EAAAF,QAAA,KACRI,EAAAA,KAAAA,CACAC,QAAOH,EAAAE,QAFRC,MAAA,OAQDJ,IAAAA,OAAQK,KAAR","file":"../index.js","sourcesContent":["\nrequire('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\n\nconst port = process.env.PORT || 8080;\n\nconst myApi = require('./api.js');\n\nconst corsOptions = {\n\torigin: true,\n\toptionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n};\n\napp.use(cors(corsOptions));\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n\textended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\napp.use(function(req, res, next) {\n\tres.header('Access-Control-Allow-Origin', '*');\n\tres.header('Access-Control-Allow-Methods', 'GET, OPTIONS, PATCH, POST, DELETE');\n\tres.header('Access-Control-Allow-Headers', 'Origin,Content-Type, Authorization');\n\tres.header('Access-Control-Allow-Credentials', true);\n\t// res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n\tnext();\n});\n\n// app.use('/vendors', express.static(`${process.cwd()}/vendors`));\n// app.use('/resources', express.static(path.join(__dirname, '../', 'client/resources')));\n// app.use(express.static(`${process.cwd()}/static`));\n// app.get('/', (req, res) => res.sendFile(path.join(__dirname, '/views/index.html')));\napp.get('/', (req, res) => {\n\tres.redirect('https://jin827.github.io');\n});\n\napp.post('/api/contact', (req, res) => {\n\treturn myApi.sendEmail(req.body)\n\t\t.then(() => {\n\t\t\tmyApi.replyEmail(req.body).then(() => {\n\t\t\t\tres.send('Email Sent Successfully!');\n\t\t\t});\n\t\t})\n\t\t.catch(err => {\n\t\t\tres.status(500).send('Email not sent!');\n\t\t\tconsole.log(err);\n\t\t});\n});\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (next) {\n\tvar err = new Error('Not Found');\n\terr.status = 404;\n\tnext(err);\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') !== 'production') {\n\tapp.use(function (err, res) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: err\n\t\t});\n\t});\n} else {\n\t// production error handler\n\t// no stacktraces leaked to user\n\tapp.use(function (err, res) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: {}\n\t\t});\n\t});\n}\n\napp.listen(port, () => {\n\tconsole.log(`Server is up on port ${port}!`);\n});\nconsole.log(`NODE_ENV : ${process.env.NODE_ENV} mode`);\n\n"]}