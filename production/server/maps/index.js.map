{"version":3,"sources":["index.js"],"names":["require","config","logger","bodyParser","cookieParser","express","cors","port","process","env","PORT","myApi","corsOptions","origin","sendMessage","req","res","next","sendEmail","body","err","sendAutoReply","replyEmail","app","use","urlencoded","json","header","get","post","Error","status","message","error","console","log"],"mappings":"aACAA,QAAQ,UAAUC,SAAlBD,IAAAA,OAAQA,QAAUC,UACZC,WAASF,QAAQ,eACjBG,aAAaH,QAAQ,iBACrBI,QAAAA,QAAeJ,WACfK,KAAAA,QAAUL,QACVM,IAAON,UAGPO,KAAOC,QAAQC,IAAIC,MAAQ,KAE3BC,MAAQX,QAAQ,YAEhBY,YAAc,CAApBC,OAAMD,2BACLC,qBAAQ,KAqCT,SAASC,YAAaC,EAAKC,EAAKC,GAAhC,IACCN,MAAIO,UAAAH,EAAAI,MACHR,IAEA,MACDS,GACCH,EAAKG,IAIP,SAASC,cAAeN,EAAKC,EAAKC,GACjC,IACCN,MAAMW,WAAWP,EAAII,MACrBF,IAGAA,MAAKG,GACLH,EAAAG,IAlDFG,IAAIC,IAAIlB,KAAKM,cAAbW,IAAIC,IAAIlB,OAAKM,QACbW,IAAIC,IAAItB,WAAOuB,WAAf,CACAF,UAAQpB,KAAsBoB,IAA9BC,IAAArB,WAAAuB,QAGAH,IAAIC,IAAIrB,gBAGRoB,IAAIC,IAAI,SAACT,EAAKC,EAAKC,GAAnBM,EAAIC,OAAI,8BAAoB,KAC3BR,EAAIW,OAAO,+BAA+B,qCAC1CX,EAAIW,OAAO,oCAAgC,GAC3CX,EAAIW,OAAO,+BAAA,iEACXX,MAQDO,IAAAK,IAAA,IAAA,SAAAb,EAAAC,GACAO,EAAIK,SAAS,8BAIbL,IAAIM,KAAK,eAAgBf,YAAaO,eA+BrCE,IAAAC,IAAIJ,SAAUU,GACdV,IAAIW,EAAJ,IAAaD,MAAb,aACAb,EAAAA,OAAA,IAHDA,EAAAG,KASS,eAARG,IAAAK,IAAQ,OACPZ,IAAAA,IAAIe,SAAWA,EAAJf,GACXA,EAAIU,OAAKN,EAAAW,QAAA,KACRC,EAAAA,KAAAA,CACAC,QAAOb,EAAAA,QAFRa,MAAAb,MASAJ,IAAAA,IAAIe,SAAWA,EAAJf,GACXA,EAAIU,OAAKN,EAAAW,QAAA,KACRC,EAAAA,KAAAA,CACAC,QAAOb,EAAAY,QAFRC,MAAA,OAQDC,IAAAA,OAAQC,KAAR","file":"../index.js","sourcesContent":["\nrequire('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\n\nconst port = process.env.PORT || 8080;\n\nconst myApi = require('./api.js');\n\nconst corsOptions = {\n\torigin: 'https://jin827.github.io',\n\toptionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n};\n\napp.use(cors(corsOptions));\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n\textended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\napp.use((req, res, next) => {\n\tres.header('Access-Control-Allow-Origin', '*');\n\tres.header('Access-Control-Allow-Methods', 'GET, OPTIONS, PATCH, POST, DELETE');\n\tres.header('Access-Control-Allow-Credentials', true);\n\tres.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n\tnext();\n\t// res.end();\n});\n\n// app.use('/vendors', express.static(`${process.cwd()}/vendors`));\n// app.use('/resources', express.static(path.join(__dirname, '../', 'client/resources')));\n// app.use(express.static(`${process.cwd()}/static`));\n// app.get('/', (req, res) => res.sendFile(path.join(__dirname, '/views/index.html')));\napp.get('/', (req, res) => {\n\tres.redirect('https://jin827.github.io');\n});\n\napp.post('/api/contact', sendMessage, sendAutoReply);\n// (req, res) => {\n\t// return myApi.sendEmail(req.body)\n\t// \t.then(() => myApi.replyEmail(req.body))\n\t// \t.then(() => res.status(201).send('Email Sent Successfully!'))\n\t// \t.catch(err => res.status(400).json(err));\n// });\n\nfunction sendMessage (req, res, next) {\n\ttry {\n\t\tmyApi.sendEmail(req.body);\n\t\tnext();\n\t}\n\tcatch (err) {\n\t\tnext(err);\n\t}\n}\n\nfunction sendAutoReply (req, res, next) {\n\ttry {\n\t\tmyApi.replyEmail(req.body);\n\t\tnext();\n\t}\n\tcatch (err) {\n\t\tnext(err);\n\t}\n}\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (next) {\n\tvar err = new Error('Not Found');\n\terr.status = 404;\n\tnext(err);\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') !== 'production') {\n\tapp.use(function (err, res) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: err\n\t\t});\n\t});\n} else {\n\t// production error handler\n\t// no stacktraces leaked to user\n\tapp.use(function (err, res) {\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: {}\n\t\t});\n\t});\n}\n\napp.listen(port, () => {\n\tconsole.log(`Server is up on port ${port}!`);\n});\nconsole.log(`NODE_ENV : ${process.env.NODE_ENV} mode`);\n"]}