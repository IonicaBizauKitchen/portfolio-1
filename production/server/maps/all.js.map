{"version":3,"sources":["api.js","index.js"],"names":["nodemailer","require","transporter","createTransport","service","auth","user","process","env","GOOGLE_EMAIL","pass","GOOGLE_PASSWORD","module","exports","sendEmail","data","name","email","subject","message","mailOptions","from","to","MY_EMAIL","html","Promise","resolve","reject","verify","error","success","sendMail","info","catch","err","replyEmail","config","logger","bodyParser","cookieParser","express","app","port","PORT","myApi","use","urlencoded","extended","json","post","req","res","body","then","static","cwd","next","Error","status","listen"],"mappings":"AAAA,MAAMA,WAAaC,QAAQ,cAErBC,YAAcF,WAAWG,iBAC3BC,QAAS,QACTC,MACIC,KAAMC,QAAQC,IAAIC,aAClBC,KAAMH,QAAQC,IAAIG,mBAI1BC,OAAOC,SAEHC,UAAYC,IACR,MAAMC,KACFA,EAAIC,MACJA,EAAKC,QACLA,EAAOC,QACPA,GACAJ,EACEK,GACFC,KAAM,qDACNC,GAAIf,QAAQC,IAAIe,SAChBL,QAASA,EACTM,iBAAkBR,oBAAuBC,cAAkBE,SAG/D,OAAO,IAAIM,QAAQ,CAACC,EAASC,KAErBzB,YAAY0B,OAAO,SAAUC,EAAOC,GAChC,IAAID,EAGA,OAAO3B,YAAY6B,SAASX,EAAa,SAAUS,EAAOG,UAQrEC,MAAMC,QAAO,IAGtBC,WAAapB,IACT,MAAMC,KACFA,EAAIC,MACJA,GACAF,EACEK,GACFC,KAAM,kCACNC,MAAON,MAASC,KAChBC,QAAS,mCACTM,mEAEgBR,iSAUpB,OAAO,IAAIS,QAAQ,CAACC,EAASC,IACdzB,YAAY6B,SAASX,EAAa,SAAUS,EAAOG,OAM7DC,MAAMC,QAAO;ACvE1BjC,QAAQ,UAAUmC,SAClB,MAAMC,OAASpC,QAAQ,UACjBqC,WAAarC,QAAQ,eACrBsC,aAAetC,QAAQ,iBACvBuC,QAAUvC,QAAQ,WAElBwC,IAAMD,UAENE,KAAOnC,QAAQC,IAAImC,MAAQ,KAE3BC,MAAQ3C,QAAQ,YAEtBwC,IAAII,IAAIR,OAAO,QACfI,IAAII,IAAIP,WAAWQ,YACfC,UAAU,KAEdN,IAAII,IAAIP,WAAWU,QACnBP,IAAII,IAAIN,gBAERE,IAAIQ,KAAK,IAAK,CAACC,EAAKC,IAETP,MAAM9B,UAAUoC,EAAIE,MACtBC,KAAKT,MAAMT,WAAWe,EAAIE,OAC1BnB,MAAMC,QAAO,IAGtBO,IAAII,IAAIL,QAAQc,UAAU/C,QAAQgD,iBAIlCd,IAAII,IAAI,SAAUK,EAAKC,EAAKK,GACxB,IAAItB,EAAM,IAAIuB,MAAM,aACpBvB,EAAIwB,OAAS,IACbF,EAAKtB,KAyBTO,IAAIkB,OAAOjB,KAAM","file":"../all.js","sourcesContent":["const nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n    service: 'gmail',\n    auth: {\n        user: process.env.GOOGLE_EMAIL,\n        pass: process.env.GOOGLE_PASSWORD\n    }\n});\n\nmodule.exports = {\n\n    sendEmail: (data) => {\n        const {\n            name,\n            email,\n            subject,\n            message\n        } = data;\n        const mailOptions = {\n            from: 'Client via Portfolio <contact.portfolio@gmail.com>',\n            to: process.env.MY_EMAIL,\n            subject: subject,\n            html: `<p>Name: ${name} <br/> Contact: ${email}<br/><br/>${message}</p>`,\n        };\n\n        return new Promise((resolve, reject) => {\n\n                transporter.verify(function (error, success) {\n                    if (error) {\n                        void 0;\n                    } else {\n                        return transporter.sendMail(mailOptions, function (error, info) {\n                            error ?\n                                void 0 :\n                                void 0;\n                        });\n                    }\n                });\n            })\n            .catch(err => void 0);\n    },\n\n    replyEmail: (data) => {\n        const {\n            name,\n            email\n        } = data;\n        const mailOptions = {\n            from: 'Jiah Lee <donotreply@gmail.com>',\n            to: `${name} <${email}>`,\n            subject: 'Auto reply message from Jiah Lee',\n            html: `          \n                <p>\n                    Hello ${name},<br/><br/>\n                    Thank you for getting in touch.<br/>\n                    I will reply to you as soon as possible.<br/>\n                    Thank you.<br/><br/>\n                    Best,<br/><br/>\n                    Jiah Lee\n                </p>   \n            `\n        };\n\n        return new Promise((resolve, reject) => {\n                return transporter.sendMail(mailOptions, function (error, info) {\n                    error ?\n                        void 0 :\n                        void 0;\n                });\n            })\n            .catch(err => void 0);\n    }\n};","require('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\n\nconst app = express();\n\nconst port = process.env.PORT || 8080;\n\nconst myApi = require('./api.js');\n\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n    extended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\napp.post('/', (req, res) => {\n\n    return myApi.sendEmail(req.body)\n        .then(myApi.replyEmail(req.body))\n        .catch(err => void 0);\n});\n\napp.use(express.static(`${process.cwd()}/client`));\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\n// development error handler\n// will print stacktrace\n// if (app.get('env') !== 'production') {\n//     app.use(function (err, req, res, next) {\n//         res.status(err.status || 500);\n//         res.status('error', {\n//             message: err.message,\n//             error: err\n//         });\n//     });\n// }\n\n// production error handler\n// no stacktraces leaked to user\n// app.use(function (err, req, res, next) {\n//     res.status(err.status || 500);\n//     res.json({\n//         message: err.message,\n//         error: {}\n//     });\n// });\n\napp.listen(port, () => {\n    void 0;\n});\n\nvoid 0;"]}